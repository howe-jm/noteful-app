import React from 'react';
import './AddFolder.css';
import ApiContext from '../ApiContext';
import cuid from 'cuid';
import ErrorPage from '../ErrorBoundary/ErrorBoundary';
import PropTypes from 'prop-types';

// Here we use a stateful class component because the form validation relies on current state.
export default class AddFolder extends React.Component {
  constructor(props) {
    super(props);
    this.state = { value: '', error: false, submitting: false, apiError: false, apiErrMsg: '' };
  }

  // Consuming context from ApiContext provided in App.js
  static contextType = ApiContext;

  // Function handles submission of new folder form.
  handleSubmit = (event) => {
    event.preventDefault();
    this.postFormToApi(this.state.value);
  };

  // Function handles submitting form data to API and processing results or errors.
  postFormToApi = (name) => {
    // Set the submitting state to true to display feedback after the user submits the form.
    this.setState({ submitting: true });
    // API call which was generated by Postman based on tests that resulted in safe, reliable results.
    const myHeaders = new Headers();
    myHeaders.append('Content-Type', 'application/x-www-form-urlencoded');
    // Implemented cuid for object ids, since api id behavior was less than ideal.
    const urlencoded = new URLSearchParams();
    urlencoded.append('id', `${cuid()}`);
    urlencoded.append('name', `${name}`);

    const requestOptions = { method: 'POST', headers: myHeaders, body: urlencoded, redirect: 'follow' };

    fetch('http://localhost:9090/folders/', requestOptions)
      // Then statements based on previous code. If the API query responds inappropriately, catch  the error and set the apiError state and apiErrMsg state appropriately.
      .then((res) => {
        if (!res.ok) return res.json().then((e) => Promise.reject(e));
        return res.json();
      })
      // Context from App.js - runs App.js function handleAddFolder, which updates the local state.
      .then((res) => {
        this.context.addFolder(res);
      })
      // Upon submission of a folder, the page doesn't need to stay on the folder submit form, so root view is pushed to the end of props.history, sending the user to main page.
      .then(() => this.props.history.push(`/`))
      // Error handling, so the rendered jsx displays appropriate feedback on any errors.
      .catch((error) => this.setState({ submitting: false, apiError: true, apiErrMsg: `${error}` }));
  };

  render() {
    const { value, error, submitting, apiError, apiErrMsg } = this.state;
    return (
      // Wrap output in error boundary.
      <ErrorPage>
        <div className='add-folder-form'>
          <h2 className='add-form-title'>Add Folder</h2>
          {/* Check that the name field isn't undefined (not likely) or an empty string (likely). If so, set error state. Otherwise, submit the folder. */}
          <form onSubmit={!value || value === '' ? this.setState({ error: true }) : this.handleSubmit}>
            <label>
              Folder Name
              <div>
                {/* Once the user starts typing after triggering the error, we can remove it and update the state as the user types. */}
                <input type='text' name='name' onChange={(event) => this.setState({ error: false, value: event.target.value })} />
              </div>
            </label>
            <div>
              <input type='submit' value='Submit' />
            </div>
            {/* Two sets of conditional statements: The first (ternary) displays feedback that the form is being submitted. If the API returns an error, the error is displayed.
                The second (conditional render) statement checks for validation error state and displays an error message if the user tried to submit without entering a name. */}
            {submitting ? <h2 className='loading-text'>Submitting...</h2> : apiError ? <h2 className='error-text'>Error: {apiErrMsg}</h2> : undefined}
            {error && <p className='error-text'>Folder must have a name!</p>}
          </form>
        </div>
      </ErrorPage>
    );
  }
}
// Still don't quite understand PropTypes... am I doing this right?
AddFolder.propTypes = {
  history: PropTypes.object,
};

AddFolder.defaultProps = {
  context: {
    folders: {},
  },
};
